level 0:
it is all about how to connect to a host using SSH, syntax is easy:
ssh username@machine(host) -p port_number then type enter.
in our case it is: 
ssh bandit0@bandit.labs.overthewire.org -p 2220 
you will be asked a password which is the same as the username(bandit0)

pass: 	ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If

level 1:
is about how to work with - as a file(dashed file names)
solution: u can use -- to inform the CLI that u done with the options and that this a file name
or you specify the whole path of the file (in our case it is /home/bandit1/-)
using cat we should get the password
263JGJPfgU6LtdEvgfWU1XP5yac29mFx


level2:
it is about how to deal with spaces in filenames. easy solution is the usage of ""
in our case: "sapces in this filename"
using concatenate we can get the password :
MNk8KNH3Usiio41PRUEoDFPqfxLPlSmx

level 3:

working with hidden files; a hidden file always starts with a dot(.0) to find our hidden files we simply run ls -la
we get a file named ...Hiding-From-You
we use the same name with concatenate to get the password :
2WmrDFRmJIq3IPxneAaMGhap0pFhF3NJ


level 4:
the challenge says the password is in a human readable file. which leans it contains ASCII encoding
we can simply use file to know the files type:
syntax:
file ~/inhere/*           just because we have dashed file names
the only file that contains ASCII text is -file07
password:
4oQYVPkxZOOEOO5pTW81FB8j8lxXGUQw

 
level5:
this time we do have many directories each one of them contains space named file and hidden ones. we cant check each one of them undividually. we use the find command with some options:
syntax:		find . -type f -size 1033c -not -executable
. is the working directory
-type to decide the type of  file we are looking for(it can be directory or file or ....)
-size we write the number and c means it is in Bytes.
-not -executable means not executable
this all conditions from the challenge itself; which leads us to this file:
./maybehere07/.file2
password: 
HWasnPhtq9AVKe0dmk45nxy20cvUa6EG

level 6:
The password for the next level is stored somewhere on the server and has all of the following properties:

owned by user bandit7
owned by group bandit6
33 bytes in size

we use the find command again but this time we dont specify the directory so we use the "/"which means the whole server.
owned by user: -user bandit7
owned by group: -group bandit6
size 33: -size 33c

we run the command: find / -user bandit7 -group bandit6 -size 33c
but we only get errors in the stdout
to see the out in stdout we gotta "get rid of the stdError" so we send them to /dev/null which is like a trash or a blackhole
stdError is 2
we redirect it to the blackhole: 2>/dev/null

new syntax: find / -user bandit7 -group bandit6 -size 33c 2>/dev/null

we find the file that contains this password: 
morbNTDkSW6jIlUc0ymOdMaLnOlFVAaj

bandit7:
The password for the next level is stored in the file data.txt next to the word millionth
we can use grep to find the sentence that contains millionth word
syntax: cat data.txt | grep millionth
result:			dfwvzFQi4mU0wfNbFOe9RoWskMLg7eEc

bandit8:

The password for the next level is stored in the file data.txt and is the only line of text that occurs only once.

simply we use the uniq command to detect the line that only accurs once:
# Display number of occurrences of each line along with that line:
sort path/to/file | uniq -c

we get a list of all the keys with the number of accurences of each of them. the only key that accured only once is:

4CKMh1JI91bUIZZPXDqGanal4xvAg0JM

bandit9:

The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‚Äò=‚Äô characters.
syntax:    cat data.txt | strings | grep "=== *"
strings command: Find printable strings in an object file or binary. basically katl9a lik ay combinaition of characters that consists of [a-z][A-Z][0-9] that is at least 3 characters_by default_(can change this)
I added the grep "=== *" to find the ones with ==
password is : FGUW5ilLVJrxX9kMYMmlN4MgbpfMiqey
 
bandit 10:

The password for the next level is stored in the file data.txt, which contains base64 encoded data
basically we have the hint already in the description; 
base64 is an encoding(not encryption) system similar to binary ..etc 
to encode we usually echo the text to base64 command
to decode we use the -d option(argument)

syntax: cat data.txt | base64 -d

The password is dtR173fZKb0RRsDFSGsg2RWnpNVj3qRr

bandit 11:
The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions

we use the tr command that stands for translate. an amazing command actually.
syntax: tr [OPTION]... STRING1 [STRING2]
STRING1  and STRING2 specify arrays of characters ARRAY1 and ARRAY2 that control the action.

our command: cat data.txt | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'

The password is 7x16WNeHIi5YkIhWsfFIqoognUTyj9Q4

bandit12:

The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work. Use mkdir with a hard to guess directory name. Or better, use the command ‚Äúmktemp -d‚Äù. Then copy the datafile using cp, and rename it using mv (read the manpages!)

first we make a directory in /tmp and we call it laylahilana
mkdir /tmp/laylahilana
then we copy it:   cp data.txt /tmp/laylahilana
we change the working directory to the one we made. (cd /tmp/laylahilana)
when we cat the file we see on the left columns some hexadecimal numbers, followed by hexadecimal again and a plain text.(left offset, middle hex bytes, right ASCII)
 
this is reminding us of hexdumb : A hex dump is a way of showing the raw data inside a file or memory.It's super useful for:

Inspecting files at the byte level (e.g., in forensics, hacking, debugging).

Understanding hidden content or binary file structure.

to decode a hexdumb we use the xxd command
sytnax: cheat:xxd 
# To convert hex to bin/string: # Revert a plaintext hexdump back into binary, and save it as a binary file:
-r          reverse operation: convert (or patch) hexdump into binary.
syntax xxd -r inputFile outputFile
mv binary.txt binary.bin
we then use File command to know what kind of fil is that, we gonna see that its gzip compressed data;
we have to change the extention and decompress it. (change using mv and decompress using gzip -d)
we then check the file type and we find that its bzip2 again. we do the same steps again as above
we continue until we find a tar file and we decode it using tar -xf filename
loop this until we get cat data8.bin
The password is FO5dwFsc0cbaIiH0h8J2eUks2vdTDwAn

 bandit13:

The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don‚Äôt get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on

# To ssh via pem file (which normally needs 0600 permissions):
ssh -i <pemfile> <user>@<host>
ssh -i sshkey.private bandit14@bandit -p 2220


after we access it on next step we find this pass: 		MU4VWeTyJk8ROof1qqmcBPaLh7lDCPvS

bandit14:
localhost is a special hostname that means ‚Äúthis computer‚Äù ‚Äî your own machine.
The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.
 to send data to a host over a specific port we use Telnet, first u have to # Connect to a remote host on a specified port
syntax:	telnet hostname port
our case: telnet localhost 30000
then u cut the password that we got the last time to get the new one; which is:

8xCjnmgoKbGLhHFAZlGE5Tmu4M2tKJQo



bandit 16:

The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL/TLS encryption.

syntax: openssl s_client -connect localhost:30001
‚Äúsecure client‚Äù ‚Äî like a minimal web browser or TLS tester
password: kSkvUpMQ7lBYyCM4GBPvCvT1BfWRy0Dx
SSl is no longer secure in 2025, we use TLS instead, much faster and secure SSL/TLS stands for implementaion of a secure connection(most likely TLS).
how does TLS work?:(Transport Layer Security)
TLS creates a secure, encrypted tunnel between two devices ‚Äî like your browser and a website ‚Äî so no one can spy, tamper, or impersonate.
High-Level Flow: TLS in 4 Steps
		Client Hello üëã
The client (like your browser or openssl s_client) says:

"Hey, I want to start a secure connection. Here's what I support:

TLS version

Encryption algorithms

Random number

Optional: session ID, extensions"

		Server Hello ü§ù
The server replies with:

TLS version it agrees on

Its certificate (proves it's real)

Chosen encryption method

Another random number

		Key Exchange üîë + Authentication

The client verifies the server‚Äôs certificate (e.g., is it signed by a trusted CA?).

They then agree on a shared secret using something like Diffie-Hellman or RSA.

This shared key will be used to encrypt all communication.

		Handshake Complete ‚úÖ
Both sides now:

Use the shared key to encrypt messages.

Start talking securely!


bandit17:

The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL/TLS and which don‚Äôt. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.


first we have to check the open ports on our local hosts and the services running on it.

syntax: nmap localhost -p 31000-32000 -sV #sV this tries to find services running on each port . can get more in the cheatSheet of nmap 

we will find 3 types of services, echo which return back waht we give, ssl/echo that do the same i guess(whatever you send to it, it echoes back.)  and one unrecognized service that says, wrong password(highly likely this is the port we are looking for: port 31790)

we will try to send the password to this port and see if it return back the next levels pass:

syntax:
openssl s_client -connect localhost:31790 -quiet
When used interactively (which means neither -quiet nor -ign_eof have been given), then certain commands are also recognized which perform special operations. These commands are a letter which must appear at the start of a line. They are listed below.

Q - End the current SSL connection and exit.

R - Renegotiate the SSL session (TLSv1.2 and below only).

k - Send a key update message to the server (TLSv1.3 only)

K - Send a key update message to the server and request one back (TLSv1.3 only)

So if the password starts with one of this keystorekes, it will trigger an action. When used with the -quiet it won't be the case.
we never get a password, rather we get an RSA key. whats that?
An RSA private key is a secret cryptographic key used in the RSA encryption algorithm. RSA is widely used for secure communication, like encrypting data, signing digital messages, or authenticating users.
	What can you do with a private key?
-->Decrypt a message that was encrypted with your public key.
-->Sign a message to prove it came from you.

we gonna save it in a file in /tmp/laylahilana2 for example
ssh -i file.key bandit17@localhost -p 2220	
cat /etc/bandit_pass/bandit17
EReVavePLFHtFlFsjn3hyzMlvSuSAcRD

bandit18:
 
